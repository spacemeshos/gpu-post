name: Build

on: push

jobs:
#  linux:
#    runs-on: ${{ matrix.os }}
#
#    strategy:
#      matrix:
#        include:
#        - os: ubuntu-18.04
#          cuda: "10.2"
#        - os: ubuntu-16.04
#          cuda: "9.2"
#
#    steps:
#    - uses: actions/checkout@v2
#
#    - name: Install CUDA
#      env:
#        CUDA: ${{ matrix.cuda }}
#      run: .github/tools/linux-install-cuda.sh
#
#    - name: Install Vulkan
#      run: .github/tools/linux-install-vulkan.sh
#
#    - run: cmake .
#
#    - run: make
#
#    - uses: actions/upload-artifact@v2
#      with:
#        name: libgpu-setup-cuda-${{ matrix.cuda }}-${{ matrix.os }}.so
#        path: src/libgpu-setup.so
#
#  windows:
#    name: windows
#    runs-on: ${{ matrix.os }}
#
#    strategy:
#      matrix:
#        include:
#        - os: windows-2016
#          cuda: "10.2.89"
#          cuda_hash: b538271c4d9ffce1a8520bf992d9bd23854f0f29cee67f48c6139e4cf301e253
#          vulkan: "1.1.126.0"
#          vs_path: c:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise
#
#    steps:
#    - uses: actions/checkout@v2
#
#    - name: Install CUDA
#      run: choco install cuda --version=${{ matrix.cuda }} --checksum ${{ matrix.cuda_hash }}
#
#    - name: Install Vulkan
#      run: choco install vulkan-sdk --version=${{ matrix.vulkan }}
#
#    - name: Build
#      env:
#        VULKAN_SDK: c:/VulkanSDK/${{ matrix.vulkan }}
#      run: |
#        call "${{ matrix.vs_path }}\VC\Auxiliary\Build\vcvars64.bat"
#        mkdir build
#        cd build
#        "${{ matrix.vs_path }}\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake" -G "Ninja" -DCMAKE_IGNORE_PATH="C:/Strawberry/c/bin;C:/ProgramData/chocolatey/bin" -DCUDA_TOOLKIT_ROOT_DIR="C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.2" -DCMAKE_MAKE_PROGRAM="${{ matrix.vs_path }}\Common7\IDE\CommonExtensions\Microsoft\CMake\Ninja\ninja.exe" ..
#        cmake --build .
#        cd src
#        rename gpu-setup.dll gpu-setup-cuda-${{ matrix.cuda }}.dll
#        rename gpu-setup.lib gpu-setup-cuda-${{ matrix.cuda }}.lib
#      shell: cmd
#
#    - name: Upload DLL
#      uses: actions/upload-artifact@v2
#      with:
#        name: gpu-setup-cuda-${{ matrix.cuda }}.dll
#        path: build/src/gpu-setup-cuda-${{ matrix.cuda }}.dll
#
#    - name: Upload lib
#      uses: actions/upload-artifact@v2
#      with:
#        name: gpu-setup-cuda-${{ matrix.cuda }}.lib
#        path: build/src/gpu-setup-cuda-${{ matrix.cuda }}.lib

  macos:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install Vulkan
      run: .github/tools/macos-install-vulkan.sh

    - run: env

    - run: cmake -DSPACEMESHCL=OFF -DSPACEMESHCUDA=OFF .

    - run: make

    - uses: actions/upload-artifact@v2
      with:
        name: libgpu-setup.dylib
        path: src/libgpu-setup.dylib

  release:
    runs-on: ubuntu-latest
    needs: [macos]
    # if: startsWith(github.event.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2

      - run: find .

      - uses: release-drafter/release-drafter@v5
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./libgpu-setup.dylib/libgpu-setup.dylib
          asset_name: libgpu-setup.dylib
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
