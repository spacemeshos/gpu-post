layout(binding = 0) buffer PadBuffer
{
	uvec4 lookup[ ];
};

layout(binding = 1) buffer constants
{
	uvec2 keccakf_rndc[24];
	uint keccakf_rotc[24];
	uint keccakf_piln[24];
};

layout(binding = 2) buffer Params
{
	uvec2 global_work_offset;
	uint N;
	uint hash_len_bits;
	uint concurrent_threads;
	uint padding[3];
	uvec4 idx_solution;
};

layout(binding = 3) buffer ClBuffer
{
	uvec4 buffer0[ ];
};

layout(binding = 4) buffer OutputBuffer1
{
	uint outputBuffer0[ ];
};

layout(binding = 5) buffer OutputBuffer2
{
	uint outputBuffer1[ ];
};

layout (local_size_x = WORKSIZE, local_size_y = 1) in;

shared uint labels[WORKSIZE * 16];

#define SCRYPT_HASH_DIGEST_SIZE 64
#define SCRYPT_KECCAK_F 1600
#define SCRYPT_HASH_BLOCK_SIZE 72
#define SCRYPT_BLOCK_BYTES 128

#define ROTL64(x, y) rotate2(x, uint(y))
#define ROTL32(x, y) ((x << y) | (x >> (32-y)))

#define bswap_32(x) ((((x) << 24) & 0xff000000u) | (((x) << 8) & 0x00ff0000u) \
                   | (((x) >> 8) & 0x0000ff00u) | (((x) >> 24) & 0x000000ffu))

struct scrypt_hash_state {
	uvec4 state4[(SCRYPT_KECCAK_F + 127) / 128]; // 8 bytes of extra
	uvec4 buffer4[(SCRYPT_HASH_BLOCK_SIZE + 15) / 16]; // 8 bytes of extra
};

struct scrypt_hmac_state {
	scrypt_hash_state inner;
	scrypt_hash_state outer;
};

const uvec4 ZERO = uvec4(0);
const uvec2 ZERO_UINT2 = uvec2(0);

const uint be1 = 0x01000000;
const uint be2 = 0x02000000;

uvec2 rotate2(uvec2 v, uint shift)
{
	uvec2 result;
	if (shift >= 32) {
		if (32 == shift) {
			result.y = v.x;
			result.x = v.y;
		} else {
			shift -= 32;
			result.y = (v.x << shift) | (v.y >> (32 - shift));
			result.x = (v.y << shift) | (v.x >> (32 - shift));
		}
	} else {
		result.y = (v.y << shift) | (v.x >> (32 - shift));
		result.x = (v.x << shift) | (v.y >> (32 - shift));
	}
	return result;
}

void
keccak_block_core(inout uvec4 s4[(SCRYPT_KECCAK_F + 127) / 128])
{
	uvec2 t[5];
	uvec2 u[5];
	uvec2 v;
	uvec2 w;
	uint i;
	
	for (i = 0; i < 24; i++) {
		/* theta: c = a[0,i] ^ a[1,i] ^ .. a[4,i] */
		t[0] = s4[0].xy ^ s4[2].zw ^ s4[5].xy ^ s4[7].zw ^ s4[10].xy;
		t[1] = s4[0].zw ^ s4[3].xy ^ s4[5].zw ^ s4[8].xy ^ s4[10].zw;
		t[2] = s4[1].xy ^ s4[3].zw ^ s4[6].xy ^ s4[8].zw ^ s4[11].xy;
		t[3] = s4[1].zw ^ s4[4].xy ^ s4[6].zw ^ s4[9].xy ^ s4[11].zw;
		t[4] = s4[2].xy ^ s4[4].zw ^ s4[7].xy ^ s4[9].zw ^ s4[12].xy;

		/* theta: d[i] = c[i+4] ^ rotl(c[i+1],1) */
		u[0] = t[4] ^ ROTL64(t[1], 1);
		u[1] = t[0] ^ ROTL64(t[2], 1);
		u[2] = t[1] ^ ROTL64(t[3], 1);
		u[3] = t[2] ^ ROTL64(t[4], 1);
		u[4] = t[3] ^ ROTL64(t[0], 1);

		/* theta: a[0,i], a[1,i], .. a[4,i] ^= d[i] */
		s4[0].xy ^= u[0]; s4[2].zw ^= u[0]; s4[5].xy ^= u[0]; s4[7].zw ^= u[0]; s4[10].xy ^= u[0];
		s4[0].zw ^= u[1]; s4[3].xy ^= u[1]; s4[5].zw ^= u[1]; s4[8].xy ^= u[1]; s4[10].zw ^= u[1];
		s4[1].xy ^= u[2]; s4[3].zw ^= u[2]; s4[6].xy ^= u[2]; s4[8].zw ^= u[2]; s4[11].xy ^= u[2];
		s4[1].zw ^= u[3]; s4[4].xy ^= u[3]; s4[6].zw ^= u[3]; s4[9].xy ^= u[3]; s4[11].zw ^= u[3];
		s4[2].xy ^= u[4]; s4[4].zw ^= u[4]; s4[7].xy ^= u[4]; s4[9].zw ^= u[4]; s4[12].xy ^= u[4];

		/* rho pi: b[..] = rotl(a[..], ..) */
		v = s4[0].zw;
		s4[ 0].zw = ROTL64(s4[ 3].xy, 44);
		s4[ 3].xy = ROTL64(s4[ 4].zw, 20);
		s4[ 4].zw = ROTL64(s4[11].xy, 61);
		s4[11].xy = ROTL64(s4[ 7].xy, 39);
		s4[ 7].xy = ROTL64(s4[10].xy, 18);
		s4[10].xy = ROTL64(s4[ 1].xy, 62);
		s4[ 1].xy = ROTL64(s4[ 6].xy, 43);
		s4[ 6].xy = ROTL64(s4[ 6].zw, 25);
		s4[ 6].zw = ROTL64(s4[ 9].zw,  8);
		s4[ 9].zw = ROTL64(s4[11].zw, 56);
		s4[11].zw = ROTL64(s4[ 7].zw, 41);
		s4[ 7].zw = ROTL64(s4[ 2].xy, 27);
		s4[ 2].xy = ROTL64(s4[12].xy, 14);
		s4[12].xy = ROTL64(s4[10].zw,  2);
		s4[10].zw = ROTL64(s4[ 4].xy, 55);
		s4[ 4].xy = ROTL64(s4[ 8].xy, 45);
		s4[ 8].xy = ROTL64(s4[ 2].zw, 36);
		s4[ 2].zw = ROTL64(s4[ 1].zw, 28);
		s4[ 1].zw = ROTL64(s4[ 9].xy, 21);
		s4[ 9].xy = ROTL64(s4[ 8].zw, 15);
		s4[ 8].zw = ROTL64(s4[ 5].zw, 10);
		s4[ 5].zw = ROTL64(s4[ 3].zw,  6);
		s4[ 3].zw = ROTL64(s4[ 5].xy,  3);
		s4[ 5].xy = ROTL64(        v,  1);

		/* chi: a[i,j] ^= ~b[i,j+1] & b[i,j+2] */
		v = s4[ 0].xy; w = s4[ 0].zw; s4[ 0].xy ^= (~w) & s4[ 1].xy; s4[ 0].zw ^= (~s4[ 1].xy) & s4[ 1].zw; s4[ 1].xy ^= (~s4[ 1].zw) & s4[ 2].xy; s4[ 1].zw ^= (~s4[ 2].xy) & v; s4[ 2].xy ^= (~v) & w;
		v = s4[ 2].zw; w = s4[ 3].xy; s4[ 2].zw ^= (~w) & s4[ 3].zw; s4[ 3].xy ^= (~s4[ 3].zw) & s4[ 4].xy; s4[ 3].zw ^= (~s4[ 4].xy) & s4[ 4].zw; s4[ 4].xy ^= (~s4[ 4].zw) & v; s4[ 4].zw ^= (~v) & w;
		v = s4[ 5].xy; w = s4[ 5].zw; s4[ 5].xy ^= (~w) & s4[ 6].xy; s4[ 5].zw ^= (~s4[ 6].xy) & s4[ 6].zw; s4[ 6].xy ^= (~s4[ 6].zw) & s4[ 7].xy; s4[ 6].zw ^= (~s4[ 7].xy) & v; s4[ 7].xy ^= (~v) & w;
		v = s4[ 7].zw; w = s4[ 8].xy; s4[ 7].zw ^= (~w) & s4[ 8].zw; s4[ 8].xy ^= (~s4[ 8].zw) & s4[ 9].xy; s4[ 8].zw ^= (~s4[ 9].xy) & s4[ 9].zw; s4[ 9].xy ^= (~s4[ 9].zw) & v; s4[ 9].zw ^= (~v) & w;
		v = s4[10].xy; w = s4[10].zw; s4[10].xy ^= (~w) & s4[11].xy; s4[10].zw ^= (~s4[11].xy) & s4[11].zw; s4[11].xy ^= (~s4[11].zw) & s4[12].xy; s4[11].zw ^= (~s4[12].xy) & v; s4[12].xy ^= (~v) & w;

		/* iota: a[0,0] ^= round constant */
		s4[0].xy ^= keccakf_rndc[i];
	}
}

#define keccak_block(S, in4) \
	for (i = 0; i < 4; i++) { \
		S.state4[i] ^= in4[i]; \
	} \
	S.state4[4].xy ^= in4[4].xy; \
	keccak_block_core(S.state4);

#define	keccak_block_zero(S, in4) \
	for (i = 0; i < 4; i++) { \
		S.state4[i] = in4[i]; \
	} \
	S.state4[4].xyzw = uvec4(in4[4].xy, 0, 0); \
	for (i = 5; i < 12; i++) { \
		S.state4[i] = ZERO; \
	} \
	S.state4[12].xy = ZERO_UINT2; \
	keccak_block_core(S.state4);

const uvec4 ROTATE_16 = uvec4(16, 16, 16, 16);
const uvec4 ROTATE_12 = uvec4(12, 12, 12, 12);
const uvec4 ROTATE_8 =  uvec4(8, 8, 8, 8);
const uvec4 ROTATE_7 =  uvec4(7, 7, 7, 7);

#define Coord(x,y,z) x+y*(x ## SIZE)+z*(y ## SIZE)*(x ## SIZE)
#define CO Coord(z,x,y)

void
scrypt_ROMix(inout uvec4 X[8], const uint N, const uint gid, const uint effective_concurrency)
{
	const uint zSIZE = 8;
	const uint ySIZE = (N/LOOKUP_GAP + (((N%LOOKUP_GAP)>0) ? 1 : 0));
	const uint xSIZE = effective_concurrency;
	const uint x = gid % xSIZE;
	uint i, j, y, z;
	uvec4 W[8];
	uvec4 tmp[4];
	uvec4 t;
	uint rounds;

	/* 1: X = B */
	/* implicit */

	/* 2: for i = 0 to N - 1 do */
	for (y = 0; y < N / LOOKUP_GAP; y++) {
		/* 3: V_i = X */

		for (z = 0; z < zSIZE; z++) {
			lookup[CO] = X[z];
		}

		for (j = 0; j < LOOKUP_GAP; j++) {
			/* 4: X = H(X) */
//			scrypt_ChunkMix_inplace_local(X);
			X[0] ^= X[4];
			X[1] ^= X[5];
			X[2] ^= X[6];
			X[3] ^= X[7];

//			chacha_core(X);
			tmp[0] = X[0];
			tmp[1] = X[1];
			tmp[2] = X[2];
			tmp[3] = X[3];

			for (rounds = 0; rounds < 4; rounds ++) {
				tmp[0] += tmp[1]; t = tmp[3] ^ tmp[0]; tmp[3] = ROTL32(t, ROTATE_16);
				tmp[2] += tmp[3]; t = tmp[1] ^ tmp[2]; tmp[1] = ROTL32(t, ROTATE_12);
				tmp[0] += tmp[1]; t = tmp[3] ^ tmp[0]; tmp[3] = ROTL32(t, ROTATE_8);
				tmp[2] += tmp[3]; t = tmp[1] ^ tmp[2]; tmp[1] = ROTL32(t, ROTATE_7);
		
				tmp[0]      += tmp[1].yzwx; t = tmp[3].wxyz ^ tmp[0];      tmp[3].wxyz = ROTL32(t, ROTATE_16);
				tmp[2].zwxy += tmp[3].wxyz; t = tmp[1].yzwx ^ tmp[2].zwxy; tmp[1].yzwx = ROTL32(t, ROTATE_12);
				tmp[0]      += tmp[1].yzwx; t = tmp[3].wxyz ^ tmp[0];      tmp[3].wxyz = ROTL32(t, ROTATE_8);
				tmp[2].zwxy += tmp[3].wxyz; t = tmp[1].yzwx ^ tmp[2].zwxy; tmp[1].yzwx = ROTL32(t, ROTATE_7);
			}

			X[0] += tmp[0];
			X[1] += tmp[1];
			X[2] += tmp[2];
			X[3] += tmp[3];

			X[4] ^= X[0];
			X[5] ^= X[1];
			X[6] ^= X[2];
			X[7] ^= X[3];

//			chacha_core(X + 4);
			tmp[0] = X[4];
			tmp[1] = X[5];
			tmp[2] = X[6];
			tmp[3] = X[7];

			for (rounds = 0; rounds < 4; rounds ++) {
				tmp[0] += tmp[1]; t = tmp[3] ^ tmp[0]; tmp[3] = ROTL32(t, ROTATE_16);
				tmp[2] += tmp[3]; t = tmp[1] ^ tmp[2]; tmp[1] = ROTL32(t, ROTATE_12);
				tmp[0] += tmp[1]; t = tmp[3] ^ tmp[0]; tmp[3] = ROTL32(t, ROTATE_8);
				tmp[2] += tmp[3]; t = tmp[1] ^ tmp[2]; tmp[1] = ROTL32(t, ROTATE_7);
		
				tmp[0]      += tmp[1].yzwx; t = tmp[3].wxyz ^ tmp[0];      tmp[3].wxyz = ROTL32(t, ROTATE_16);
				tmp[2].zwxy += tmp[3].wxyz; t = tmp[1].yzwx ^ tmp[2].zwxy; tmp[1].yzwx = ROTL32(t, ROTATE_12);
				tmp[0]      += tmp[1].yzwx; t = tmp[3].wxyz ^ tmp[0];      tmp[3].wxyz = ROTL32(t, ROTATE_8);
				tmp[2].zwxy += tmp[3].wxyz; t = tmp[1].yzwx ^ tmp[2].zwxy; tmp[1].yzwx = ROTL32(t, ROTATE_7);
			}

			X[4] += tmp[0];
			X[5] += tmp[1];
			X[6] += tmp[2];
			X[7] += tmp[3];
		}
	}

	/* 6: for i = 0 to N - 1 do */
	for (i = 0; i < N; i++) {
		/* 7: j = Integerify(X) % N */
		j = X[4].x & (N - 1);
		y = j / LOOKUP_GAP;

		for (z = 0; z < zSIZE; z++) {
			W[z] = lookup[CO];
		}

		uint c = j % LOOKUP_GAP;
		for (uint k = 0; k < c; k++) {
//			scrypt_ChunkMix_inplace_local(W);
			W[0] ^= W[4];
			W[1] ^= W[5];
			W[2] ^= W[6];
			W[3] ^= W[7];

//			chacha_core(W);
			tmp[0] = W[0];
			tmp[1] = W[1];
			tmp[2] = W[2];
			tmp[3] = W[3];

			for (rounds = 0; rounds < 4; rounds ++) {
				tmp[0] += tmp[1]; t = tmp[3] ^ tmp[0]; tmp[3] = ROTL32(t, ROTATE_16);
				tmp[2] += tmp[3]; t = tmp[1] ^ tmp[2]; tmp[1] = ROTL32(t, ROTATE_12);
				tmp[0] += tmp[1]; t = tmp[3] ^ tmp[0]; tmp[3] = ROTL32(t, ROTATE_8);
				tmp[2] += tmp[3]; t = tmp[1] ^ tmp[2]; tmp[1] = ROTL32(t, ROTATE_7);
		
				tmp[0]      += tmp[1].yzwx; t = tmp[3].wxyz ^ tmp[0];      tmp[3].wxyz = ROTL32(t, ROTATE_16);
				tmp[2].zwxy += tmp[3].wxyz; t = tmp[1].yzwx ^ tmp[2].zwxy; tmp[1].yzwx = ROTL32(t, ROTATE_12);
				tmp[0]      += tmp[1].yzwx; t = tmp[3].wxyz ^ tmp[0];      tmp[3].wxyz = ROTL32(t, ROTATE_8);
				tmp[2].zwxy += tmp[3].wxyz; t = tmp[1].yzwx ^ tmp[2].zwxy; tmp[1].yzwx = ROTL32(t, ROTATE_7);
			}

			W[0] += tmp[0];
			W[1] += tmp[1];
			W[2] += tmp[2];
			W[3] += tmp[3];

			W[4] ^= W[0];
			W[5] ^= W[1];
			W[6] ^= W[2];
			W[7] ^= W[3];

//			chacha_core(W + 4);
			tmp[0] = W[4];
			tmp[1] = W[5];
			tmp[2] = W[6];
			tmp[3] = W[7];

			for (rounds = 0; rounds < 4; rounds ++) {
				tmp[0] += tmp[1]; t = tmp[3] ^ tmp[0]; tmp[3] = ROTL32(t, ROTATE_16);
				tmp[2] += tmp[3]; t = tmp[1] ^ tmp[2]; tmp[1] = ROTL32(t, ROTATE_12);
				tmp[0] += tmp[1]; t = tmp[3] ^ tmp[0]; tmp[3] = ROTL32(t, ROTATE_8);
				tmp[2] += tmp[3]; t = tmp[1] ^ tmp[2]; tmp[1] = ROTL32(t, ROTATE_7);
		
				tmp[0]      += tmp[1].yzwx; t = tmp[3].wxyz ^ tmp[0];      tmp[3].wxyz = ROTL32(t, ROTATE_16);
				tmp[2].zwxy += tmp[3].wxyz; t = tmp[1].yzwx ^ tmp[2].zwxy; tmp[1].yzwx = ROTL32(t, ROTATE_12);
				tmp[0]      += tmp[1].yzwx; t = tmp[3].wxyz ^ tmp[0];      tmp[3].wxyz = ROTL32(t, ROTATE_8);
				tmp[2].zwxy += tmp[3].wxyz; t = tmp[1].yzwx ^ tmp[2].zwxy; tmp[1].yzwx = ROTL32(t, ROTATE_7);
			}

			W[4] += tmp[0];
			W[5] += tmp[1];
			W[6] += tmp[2];
			W[7] += tmp[3];
		}

		/* 8: X = H(X ^ V_j) */
//		scrypt_ChunkMix_inplace_Bxor_local(X, W);
		X[0] ^= X[4] ^ W[4] ^ W[0];
		X[1] ^= X[5] ^ W[5] ^ W[1];
		X[2] ^= X[6] ^ W[6] ^ W[2];
		X[3] ^= X[7] ^ W[7] ^ W[3];
		
//		chacha_core(X);
		tmp[0] = X[0];
		tmp[1] = X[1];
		tmp[2] = X[2];
		tmp[3] = X[3];

		for (rounds = 0; rounds < 4; rounds ++) {
			tmp[0] += tmp[1]; t = tmp[3] ^ tmp[0]; tmp[3] = ROTL32(t, ROTATE_16);
			tmp[2] += tmp[3]; t = tmp[1] ^ tmp[2]; tmp[1] = ROTL32(t, ROTATE_12);
			tmp[0] += tmp[1]; t = tmp[3] ^ tmp[0]; tmp[3] = ROTL32(t, ROTATE_8);
			tmp[2] += tmp[3]; t = tmp[1] ^ tmp[2]; tmp[1] = ROTL32(t, ROTATE_7);
		
			tmp[0]      += tmp[1].yzwx; t = tmp[3].wxyz ^ tmp[0];      tmp[3].wxyz = ROTL32(t, ROTATE_16);
			tmp[2].zwxy += tmp[3].wxyz; t = tmp[1].yzwx ^ tmp[2].zwxy; tmp[1].yzwx = ROTL32(t, ROTATE_12);
			tmp[0]      += tmp[1].yzwx; t = tmp[3].wxyz ^ tmp[0];      tmp[3].wxyz = ROTL32(t, ROTATE_8);
			tmp[2].zwxy += tmp[3].wxyz; t = tmp[1].yzwx ^ tmp[2].zwxy; tmp[1].yzwx = ROTL32(t, ROTATE_7);
		}

		X[0] += tmp[0];
		X[1] += tmp[1];
		X[2] += tmp[2];
		X[3] += tmp[3];

		X[4] ^= X[0] ^ W[4];
		X[5] ^= X[1] ^ W[5];
		X[6] ^= X[2] ^ W[6];
		X[7] ^= X[3] ^ W[7];
		
//		chacha_core(X + 4);
		tmp[0] = X[4];
		tmp[1] = X[5];
		tmp[2] = X[6];
		tmp[3] = X[7];

		for (rounds = 0; rounds < 4; rounds ++) {
			tmp[0] += tmp[1]; t = tmp[3] ^ tmp[0]; tmp[3] = ROTL32(t, ROTATE_16);
			tmp[2] += tmp[3]; t = tmp[1] ^ tmp[2]; tmp[1] = ROTL32(t, ROTATE_12);
			tmp[0] += tmp[1]; t = tmp[3] ^ tmp[0]; tmp[3] = ROTL32(t, ROTATE_8);
			tmp[2] += tmp[3]; t = tmp[1] ^ tmp[2]; tmp[1] = ROTL32(t, ROTATE_7);
		
			tmp[0]      += tmp[1].yzwx; t = tmp[3].wxyz ^ tmp[0];      tmp[3].wxyz = ROTL32(t, ROTATE_16);
			tmp[2].zwxy += tmp[3].wxyz; t = tmp[1].yzwx ^ tmp[2].zwxy; tmp[1].yzwx = ROTL32(t, ROTATE_12);
			tmp[0]      += tmp[1].yzwx; t = tmp[3].wxyz ^ tmp[0];      tmp[3].wxyz = ROTL32(t, ROTATE_8);
			tmp[2].zwxy += tmp[3].wxyz; t = tmp[1].yzwx ^ tmp[2].zwxy; tmp[1].yzwx = ROTL32(t, ROTATE_7);
		}

		X[4] += tmp[0];
		X[5] += tmp[1];
		X[6] += tmp[2];
		X[7] += tmp[3];
	}

	/* 10: B' = X */
	/* implicit */
}

const uvec4 KEY_0X36            = uvec4(0x36363636);
const uvec2 KEY_0X36_2          = uvec2(0x36363636);
const uvec4 KEY_0X36_XOR_0X5C   = uvec4(0x6A6A6A6A);
const uvec2 KEY_0X36_XOR_0X5C_2 = uvec2(0x6A6A6A6A);

#define	LABEL_MASK	((1 << LABEL_SIZE) - 1)

void
main() 
{
	uvec4 password[5];
	uvec4 X[8];
	const uint lid = gl_LocalInvocationID.x;
	const uint gid = gl_GlobalInvocationID.x;
	uint tmp;
	uvec2 nonce;

	scrypt_hmac_state hmac_pw, work;
	uvec4 ti4[SCRYPT_HASH_BLOCK_SIZE/16 + 1];
	uint i;

	i = 1 & global_work_offset.x & gid;
	nonce = global_work_offset >> 1;
	nonce.x += nonce.y + i;
	if (0 != (0x80000000 & nonce.x)) {
		nonce.y = global_work_offset.y + 1;
		nonce.x = global_work_offset.x + gid;
	} else {
		nonce.y = global_work_offset.y;
		nonce.x = global_work_offset.x + gid;
	}

	password[0] = buffer0[0];
	password[1] = buffer0[1];
	password[2] = buffer0[2];
	password[3] = buffer0[3];
	password[4] = buffer0[4];
	password[2].xy = nonce;

	/* 1: X = PBKDF2(password, salt) */

//////////////////////////////////////////////////
//	scrypt_hmac_init(&hmac_pw, password);

	for (i = 0; i < 4; i++) {
		ti4[i] = password[i];
	}
	ti4[4].xy = password[4].xy;

	for (i = 0; i < 4; i++) {
		ti4[i] ^= KEY_0X36;
	}
	ti4[4].xy ^= KEY_0X36_2;

//////////////////////////////////////////////////
//	scrypt_hash_update_72(&st->inner, pad4);
	keccak_block_zero(hmac_pw.inner, ti4);
//////////////////////////////////////////////////

	for (i = 0; i < 4; i++) {
		ti4[i] ^= KEY_0X36_XOR_0X5C;
	}
	ti4[4].xy ^= KEY_0X36_XOR_0X5C_2;
//////////////////////////////////////////////////
//	scrypt_hash_update_72(&st->outer, pad4);
	keccak_block_zero(hmac_pw.outer, ti4);
//////////////////////////////////////////////////
//////////////////////////////////////////////////

//////////////////////////////////////////////////
//	scrypt_copy_hmac_state_128B(&work, &hmac_pw);
	for (i = 0; i < 12; i++) {
		work.inner.state4[i] = hmac_pw.inner.state4[i];
	}
	work.inner.state4[12].xy = hmac_pw.inner.state4[12].xy;

	work.inner.buffer4[0].xy = hmac_pw.inner.buffer4[0].xy;

	for (i = 0; i < 12; i++) {
		work.outer.state4[i] = hmac_pw.outer.state4[i];
	}
	work.outer.state4[12].xy = hmac_pw.outer.state4[12].xy;
//////////////////////////////////////////////////

//////////////////////////////////////////////////
//	scrypt_hmac_update_4_after_72(&work, be1);
	work.inner.buffer4[0] = uvec4(be1, 0x01, 0, 0);
//////////////////////////////////////////////////

//////////////////////////////////////////////////
//	scrypt_hmac_finish_128B(&work, ti4);
//	scrypt_hash_finish_80_after_72_4(&st->inner, innerhash);
	for (i = 1; i < 4; i++) {
		work.inner.buffer4[i] = ZERO;
	}
	work.inner.buffer4[4].xy = uvec2(0, 0x80000000);
	
	keccak_block(work.inner, work.inner.buffer4);
	
//	scrypt_hash_update_64(&st->outer, innerhash);
	for (i = 0; i < 4; i++) {
		work.outer.buffer4[i] = work.inner.state4[i];
	}

//	scrypt_hash_finish_80_after_64(&st->outer, mac);
	work.outer.buffer4[4].xy = uvec2(0x01, 0x80000000);
	
	keccak_block(work.outer, work.outer.buffer4);
	
	for (i = 0; i < 4; i++) {
		X[i] = work.outer.state4[i];
	}
//////////////////////////////////////////////////

	/* U1 = hmac(password, salt || be(i)) */
	/* U32TO8_BE(be, i); */
//////////////////////////////////////////////////
//	scrypt_hmac_update_4_after_72(&hmac_pw, be2);
//	scrypt_hash_update_4_after_72(&st->inner, m);
	hmac_pw.inner.buffer4[0] = uvec4(be2, 0x01, 0, 0);
//////////////////////////////////////////////////

//////////////////////////////////////////////////
//	scrypt_hmac_finish_128B(&hmac_pw, ti4);
//	scrypt_hash_finish_80_after_72_4(&st->inner, innerhash);
	for (i = 1; i < 4; i++) {
		hmac_pw.inner.buffer4[i] = ZERO;
	}
	hmac_pw.inner.buffer4[4].xy = uvec2(0, 0x80000000);
	
	keccak_block(hmac_pw.inner, hmac_pw.inner.buffer4);
	
//	scrypt_hash_update_64(&st->outer, innerhash);
	for (uint i = 0; i < 4; i++) {
		hmac_pw.outer.buffer4[i] = hmac_pw.inner.state4[i];
	}

//	scrypt_hash_finish_80_after_64(&st->outer, mac);
	hmac_pw.outer.buffer4[4].xy = uvec2(0x01, 0x80000000);
	
	keccak_block(hmac_pw.outer, hmac_pw.outer.buffer4);
	
	for (uint i = 0; i < 4; i++) {
		X[i + 4] = hmac_pw.outer.state4[i];
	}
//////////////////////////////////////////////////
	/* 2: X = ROMix(X) */
	scrypt_ROMix(X, N, gid, concurrent_threads);

	/* 3: Out = PBKDF2(password, X) */
//////////////////////////////////////////////////
//	labels[lid] = scrypt_pbkdf2_32B(password, X);

//////////////////////////////////////////////////
//	scrypt_hmac_init(&hmac_pw, password);

	for (i = 0; i < 4; i++) {
		ti4[i] = password[i];
	}
	ti4[4].xy = password[4].xy;

	for (i = 0; i < 4; i++) {
		ti4[i] ^= KEY_0X36;
	}
	ti4[4].xy ^= KEY_0X36_2;
//////////////////////////////////////////////////
//	scrypt_hash_update_72(&st->inner, pad4);
	keccak_block_zero(hmac_pw.inner, ti4);
//////////////////////////////////////////////////

	for (i = 0; i < 4; i++) {
		ti4[i] ^= KEY_0X36_XOR_0X5C;
	}
	ti4[4].xy ^= KEY_0X36_XOR_0X5C_2;
//////////////////////////////////////////////////
//	scrypt_hash_update_72(&st->outer, pad4);
	keccak_block_zero(hmac_pw.outer, ti4);
//////////////////////////////////////////////////
//////////////////////////////////////////////////

//////////////////////////////////////////////////
//	scrypt_hmac_update_128(&hmac_pw, salt);
//	scrypt_hash_update_128(&st->inner, m);
	keccak_block(hmac_pw.inner, X);

	hmac_pw.inner.buffer4[0].xy = X[4].zw;
	hmac_pw.inner.buffer4[0].zw = X[5].xy;
	hmac_pw.inner.buffer4[1].xy = X[5].zw;
	hmac_pw.inner.buffer4[1].zw = X[6].xy;
	hmac_pw.inner.buffer4[2].xy = X[6].zw;
	hmac_pw.inner.buffer4[2].zw = X[7].xy;
	hmac_pw.inner.buffer4[3].xy = X[7].zw;
//////////////////////////////////////////////////

//////////////////////////////////////////////////
//	scrypt_hmac_update_4_after_128(&hmac_pw, be1);
//	scrypt_hash_update_4_after_128(&st->inner, m);
	hmac_pw.inner.buffer4[3].zw = uvec2(be1, 0x01);
//////////////////////////////////////////////////

//////////////////////////////////////////////////
//	return scrypt_hmac_finish_32B(&hmac_pw);
//	scrypt_hash_finish_80_after_128_4(&st->inner, innerhash);
	hmac_pw.inner.buffer4[4].xy = uvec2(0, 0x80000000);
	keccak_block(hmac_pw.inner, hmac_pw.inner.buffer4);
//	scrypt_hash_update_64(&st->outer, innerhash);
	hmac_pw.outer.buffer4[0] = hmac_pw.inner.state4[0];
	hmac_pw.outer.buffer4[1] = hmac_pw.inner.state4[1];
	hmac_pw.outer.buffer4[2] = hmac_pw.inner.state4[2];
	hmac_pw.outer.buffer4[3] = hmac_pw.inner.state4[3];
//	return scrypt_hash_finish_80_after_64_1(&st->outer);
	hmac_pw.outer.buffer4[4].xy = uvec2(0x01, 0x80000000);
	keccak_block(hmac_pw.outer, hmac_pw.outer.buffer4);

	int cmp = 0;

	tmp = bswap_32(hmac_pw.outer.state4[0].x);
	if (buffer0[5].x != tmp) {
		cmp = tmp < buffer0[5].x ? -1 : 1;
	}

	tmp = bswap_32(hmac_pw.outer.state4[0].y);
	if (cmp == 0 && buffer0[5].y != tmp) {
		cmp = tmp < buffer0[5].y ? -1 : 1;
	}

	tmp = bswap_32(hmac_pw.outer.state4[0].z);
	if (cmp == 0 && buffer0[5].z != tmp) {
		cmp = tmp < buffer0[5].z ? -1 : 1;
	}

	tmp = bswap_32(hmac_pw.outer.state4[0].w);
	if (cmp == 0 && buffer0[5].w != tmp) {
		cmp = tmp < buffer0[5].w ? -1 : 1;
	}

	tmp = bswap_32(hmac_pw.outer.state4[1].x);
	if (cmp == 0 && buffer0[6].x != tmp) {
		cmp = tmp < buffer0[6].x ? -1 : 1;
	}

	tmp = bswap_32(hmac_pw.outer.state4[1].y);
	if (cmp == 0 && buffer0[6].y != tmp) {
		cmp = tmp < buffer0[6].y ? -1 : 1;
	}

	tmp = bswap_32(hmac_pw.outer.state4[1].z);
	if (cmp == 0 && buffer0[6].z != tmp) {
		cmp = tmp < buffer0[6].z ? -1 : 1;
	}

	tmp = bswap_32(hmac_pw.outer.state4[1].w);
	if (cmp == 0 && buffer0[6].w != tmp) {
		cmp = tmp < buffer0[6].w ? -1 : 1;
	}

	if (cmp < 0) {
		idx_solution.xy = nonce;
	}

//	labels[lid] = hmac_pw.outer.state4[0].x & LABEL_MASK;
//////////////////////////////////////////////////
//////////////////////////////////////////////////
